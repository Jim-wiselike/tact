#!/usr/bin/ruby

require 'rexml/document'
require 'set'
require 'narray'
require File.expand_path(File.dirname(__FILE__)) + '/../lib/common.rb'
include REXML
include Math

####################################################################################################

@all_flags = Set.new
@flags_values = Hash.new

def normalize(flag)
  r = \
  case flag
  when /^(.+)=(.*)$/
    $1
  when /^-fno-(.+)$/
    "-f" + $1
  when /^-mno-(.+)$/
    "-m" + $1
  when /^-DNO_(.+)$/
    "-D" + $1
  when /^(-f.+)$/
    $1
  when /^(-m.+)$/
    $1
  when /^(-D.+)$/
    $1
  when /^(.+)$/
    $1
  end
  @all_flags.add(r)
  @flags_values[r] = [] if not @flags_values.has_key?(r)
  @flags_values[r].push(flag) if @flags_values[r].index(flag) == nil
  return r
end

def parse_flags(compile_str)
  if compile_str.match(/(\s*(--param\s+\S+|\S+)\s*)*/)
    return Hash[compile_str.scan(/\s*(--param\s+\S+|\S+)\s*/).map {|f| [normalize(f[0]), f[0]]}]
  else
    $stderr.puts "Wrong compile string! ignored"
  end
end

init_samples = ARGV.map {|a|
  begin 
    XPath.match(Document.new(File.new(a)), "//benchmark_run").map {|r| \
      {:flags => parse_flags(r.attributes['compile_str']), :score => r.attributes['score']} \
    } 
  rescue
    []
  end
}.flatten

init_samples.reject! {|s| s[:score].to_f <= 0 or s[:score].to_f >= 10000}
@all_flags.reject! {|f| @flags_values[f].size > 2}
@flags_values.each {|k,vs| vs.sort! {|a,b| a.length <=> b.length} }

good_flags = []

file = File.new("flags", "r")                    
while (line = file.gets)
  if line =~ /^\s*(\S.*\S)\s*$/
    good_flags.push normalize($1)
  end
end
file.close 

#all_pairs = (good_flags.map {|a| [a,a]} )#+ good_flags.map {|a| good_flags.map {|b| [a,b].sort} }.flatten(1)).to_set
all_pairs = (good_flags.map {|a| good_flags.map {|b| [a,b].sort} }.flatten(1)).to_set

$stderr.puts "pairs constructed"
$stderr.flush

matrix_original_1 = NMatrix.to_na(init_samples.map {|s| all_pairs.to_a.map {|a,b|
                                      l = @flags_values[a].index(s[:flags][a])
                                      r = @flags_values[b].index(s[:flags][b])
                                      l1 = l == nil ? 0.0 : (1 - l).to_f
                                      r1 = r == nil ? 0.0 : (1 - r).to_f
                                      l2 = l == nil ? 0.0 : l.to_f
                                      r2 = r == nil ? 0.0 : r.to_f
                                      [l1*r1, l2*r2]
                                    }.flatten(1)})

$stderr.puts "matrix constructed"
$stderr.flush

rhs_original_1 = NVector.to_na(init_samples.map {|s| s[:score].to_f})

matrix_original = matrix_original_1[true, 0..rhs_original_1.total/2]
rhs_original = rhs_original_1[0..rhs_original_1.total/2]

matrix = matrix_original
rhs = matrix.transpose * rhs_original
matrix = matrix.transpose * matrix_original

diag = matrix.clone.fill(0.0).diagonal(0.01)
matrix = matrix + diag

lhs = rhs / matrix

n = 0
all_pairs.to_a.each do |a,b|
  puts "#{lhs[n]}  \t#{@flags_values[a][0]}  \t#{@flags_values[b][0]}"
  puts "#{lhs[n+1]}  \t#{@flags_values[a][1]}  \t#{@flags_values[b][1]}"
  # c = 1
  # @flags_values[f].each do |v|
  #  puts "#{v}\t\t#{lhs[n]}"
  # end
  n += 2
end

newscores = matrix_original_1 * lhs

(0..newscores.total-1).each do |i|
  puts "#{(rhs_original_1[i] - newscores[i]).abs}  \t#{rhs_original_1[i]}  ->\t#{newscores[i]}"
end

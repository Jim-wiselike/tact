#!/usr/bin/ruby

require 'rexml/document'
require 'set'
require 'optparse'
require File.expand_path(File.dirname(__FILE__)) + '/../lib/common.rb'
require File.expand_path(File.dirname(__FILE__)) + '/../lib/FlagsParser.rb'
include REXML
include Math

@profile = false
@output = "."
@cachedir = "log/current/tmp/"

OptionParser.new do |opts|
  opts.banner = "Usage: $0 [options]"
  opts.on("--profile", "Do profiling") do
    @profile = true
  end
  opts.on("--output OUT", "Put the results to this directory") do |o|
    @output = o
  end
end.parse!(ARGV)

@init_samples = []
@initial_options = ARGV.join(" ")

def run(flags, name="")

  comp_str = flags_to_string(flags)
  puts "CHECKING #{comp_str}"

  `mkdir -p "#{@cachedir}"`
  `mkdir -p "#{@output}"`
  rand_name = (0...16).map{ ('a'..'z').to_a[rand(26)] }.join

  begin
  runner = TestRunner.new({
     :compile_options => comp_str,
     :generation_num => 0,
     :population_num => 1,
     :run_num => nil,
     :do_profiling => @profile,
     :greater_is_better => false,
     :compile_only => true,
     :assembly => true,
     :xml_run_log => "#{@cachedir}/#{rand_name}.xml",
     :reference_run => false,
     :unfailing => true,
     :repetitions => @repetitions
   })
  rescue SystemExit => e
  end

  if runner != nil and runner.asm != nil
    `cp "#{runner.asm}" "#{@output}/without-#{name}.s"`

    puts "ASM: #{@output}/without-#{name}.s"
  end

  new = {:flags => flags, :file => "#{@cachedir}/#{rand_name}.xml"}

  return new
end

@c = nil
@flag = nil

def reduce(a, b)
  d = diff(a, b).to_a
  if d.size > 0
    d.sort! {|a1,b1| @order[b1] <=> @order[a1]}

    cs = []

    d.each do |f|
      @flag = f
      cf = a[:flags].clone
      cf[f] = b[:flags][f]
      @c = run(cf, a[:flags][f].gsub(" ", "_"))
    end
  end
end

@init_samples.push(run(string_to_flags(@initial_options), "nothing"))
@init_samples.push({:flags => {}, :good => true})
reduce(@init_samples[0], @init_samples[1])
